from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from binance.client import Client
import keyboards.keyboards as kb
from services.binance_service import user_data

router = Router()

class FormState(StatesGroup):
    waiting_for_api_keys = State()

@router.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=kb.authorize_keyboard)

@router.message(Command("authorize"))
async def authorize_command(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Binance API –∫–ª—é—á –∏ —Å–µ–∫—Ä–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
    await state.set_state(FormState.waiting_for_api_keys)

@router.callback_query(F.data == "authorize")
async def authorize_callback(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Binance API –∫–ª—é—á –∏ —Å–µ–∫—Ä–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
    await state.set_state(FormState.waiting_for_api_keys)

@router.message(FormState.waiting_for_api_keys)
async def handle_binance_api_keys(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    keys = message.text.split()

    if len(keys) != 2:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á –∏ —Å–µ–∫—Ä–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return
    
    api_key, api_secret = keys

    try:
        client = Client(api_key, api_secret)
        client.get_account()
        user_data[user_id] = {'api_key': api_key, 'api_secret': api_secret}

        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.persistent_menu_keyboard)
        await state.clear()
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏.")
