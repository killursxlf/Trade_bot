import re
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from services.binance_service import get_ta_data

TA_DATA_CACHE = {}

router = Router()

def escape_md(text: str) -> str:

    return re.sub(r'([_*[\]()~`>#+\-=|{}.!])', r'\\\1', text)

def calculate_composite_signal(ta_data):

    score_buy = 0
    score_sell = 0
    details = []

    rsi = ta_data.get("RSI")
    if rsi is None:
        details.append("*RSI:* –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\\.")
    else:
        rsi_str = escape_md(f"{rsi:.2f}")
        if rsi > 70:
            score_sell += 1
            details.append(
                f"*RSI:* {rsi_str} üî¥ ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—à–µ 70 \\(–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å, —Å–∏–≥–Ω–∞–ª *SELL*\\)\\."
            )
        elif rsi < 30:
            score_buy += 1
            details.append(
                f"*RSI:* {rsi_str} üü¢ ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∏–∂–µ 30 \\(–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å, —Å–∏–≥–Ω–∞–ª *BUY*\\)\\."
            )
        else:
            details.append(f"*RSI:* {rsi_str} ‚ö™ ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\\.")


    adx = ta_data.get("ADX")
    if adx is not None:
        adx_str = escape_md(f"{adx:.2f}")
        if adx >= 25:
            details.append(f"*ADX:* {adx_str} üí™ ‚Äî —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥\\.")
            last_close = ta_data.get("last_close")
            sma50 = ta_data.get("SMA_50")
            ema20 = ta_data.get("EMA_20")
            if last_close is not None and sma50 is not None and ema20 is not None:
                last_close_str = escape_md(f"{last_close:.2f}")
                sma50_str = escape_md(f"{sma50:.2f}")
                ema20_str = escape_md(f"{ema20:.2f}")
                if last_close > sma50 and last_close > ema20:
                    score_buy += 1
                    details.append(
                        f"*–¶–µ–Ω–∞:* {last_close_str} > *SMA 50:* {sma50_str} –∏ *EMA 20:* {ema20_str} üìà ‚Äî —Å–∏–≥–Ω–∞–ª *BUY*\\."
                    )
                elif last_close < sma50 and last_close < ema20:
                    score_sell += 1
                    details.append(
                        f"*–¶–µ–Ω–∞:* {last_close_str} < *SMA 50:* {sma50_str} –∏ *EMA 20:* {ema20_str} üìâ ‚Äî —Å–∏–≥–Ω–∞–ª *SELL*\\."
                    )
                else:
                    details.append(
                        f"*–¶–µ–Ω–∞:* {last_close_str} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É *SMA 50* –∏ *EMA 20* ‚Äî —Å–∏–≥–Ω–∞–ª –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π\\."
                    )
        else:
            details.append(f"*ADX:* {adx_str} ü§∑ ‚Äî —Å–ª–∞–±—ã–π –∏–ª–∏ –Ω–µ—É—Å—Ç–æ–π—á–∏–≤—ã–π —Ç—Ä–µ–Ω–¥\\.")
    else:
        details.append("*ADX:* –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\\.")


    macd = ta_data.get("MACD")
    macd_signal = ta_data.get("MACD_signal")
    if macd is not None and macd_signal is not None:
        macd_str = escape_md(f"{macd:.2f}")
        macd_signal_str = escape_md(f"{macd_signal:.2f}")
        if macd > macd_signal:
            score_buy += 1
            details.append(
                f"*MACD:* {macd_str} > *Signal:* {macd_signal_str} üîº ‚Äî —Å–∏–≥–Ω–∞–ª *BUY*\\."
            )
        elif macd < macd_signal:
            score_sell += 1
            details.append(
                f"*MACD:* {macd_str} < *Signal:* {macd_signal_str} üîΩ ‚Äî —Å–∏–≥–Ω–∞–ª *SELL*\\."
            )
        else:
            details.append("*MACD:* –°–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ\\.")
    else:
        details.append("*MACD:* –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\\.")


    bb_upper = ta_data.get("BB_upper")
    bb_lower = ta_data.get("BB_lower")
    last_close = ta_data.get("last_close")
    if bb_upper is not None and bb_lower is not None and last_close is not None:
        bb_upper_str = escape_md(f"{bb_upper:.2f}")
        bb_lower_str = escape_md(f"{bb_lower:.2f}")
        last_close_str = escape_md(f"{last_close:.2f}")
        if last_close >= bb_upper:
            score_sell += 1
            details.append(
                f"*Bollinger Bands:* –¶–µ–Ω–∞ {last_close_str} ‚â• –í–µ—Ä—Ö–Ω–µ–π {bb_upper_str} ‚¨ÜÔ∏è ‚Äî —Å–∏–≥–Ω–∞–ª *SELL*\\."
            )
        elif last_close <= bb_lower:
            score_buy += 1
            details.append(
                f"*Bollinger Bands:* –¶–µ–Ω–∞ {last_close_str} ‚â§ –ù–∏–∂–Ω–µ–π {bb_lower_str} ‚¨áÔ∏è ‚Äî —Å–∏–≥–Ω–∞–ª *BUY*\\."
            )
        else:
            details.append(
                f"*Bollinger Bands:* –¶–µ–Ω–∞ {last_close_str} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞\\."
            )
    else:
        details.append("*Bollinger Bands:* –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\\.")


    obv = ta_data.get("OBV")
    if obv is not None:
        obv_str = escape_md(f"{obv:.2f}")
        details.append(
            f"*OBV:* {obv_str} üí∞ ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–Ω–¥–∞\\."
        )
    else:
        details.append("*OBV:* –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\\.")


    atr = ta_data.get("ATR")
    if atr is not None:
        atr_str = escape_md(f"{atr:.2f}")
        details.append(f"*ATR:* {atr_str} üìä ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏\\.")
    else:
        details.append("*ATR:* –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\\.")


    if score_buy > score_sell:
        overall_signal = "BUY"
        overall_emoji = "üü¢"
    elif score_sell > score_buy:
        overall_signal = "SELL"
        overall_emoji = "üî¥"
    else:
        overall_signal = "NEUTRAL"
        overall_emoji = "‚ö™"

    report = f"*–û–±—â–∏–π —Å–∏–≥–Ω–∞–ª: {overall_signal} {overall_emoji}*\n\n" + "\n".join(details)
    return overall_signal, report


@router.message(Command("ta"))
async def ta_command_handler(message: types.Message) -> None:

    parts = message.text.split()
    if len(parts) != 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /ta <–≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞> <–∏–Ω—Ç–µ—Ä–≤–∞–ª>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /ta BTCUSDT 1h")
        return

    _, pair, interval = parts
    user_id = message.from_user.id

    ta_data = get_ta_data(user_id, pair, interval)
    if "error" in ta_data:
        await message.reply(f"–û—à–∏–±–∫–∞: {ta_data['error']}")
        return

    TA_DATA_CACHE[user_id] = ta_data


    last_close_val = ta_data.get("last_close")
    last_close_str = escape_md(str(last_close_val)) if last_close_val is not None else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    rsi_val = ta_data.get("RSI")
    rsi_str = escape_md(f"{rsi_val:.2f}") if rsi_val is not None else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    adx_val = ta_data.get("ADX")
    adx_str = escape_md(f"{adx_val:.2f}") if adx_val is not None else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    macd_val = ta_data.get("MACD")
    macd_str = escape_md(f"{macd_val:.2f}") if macd_val is not None else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    bb_upper_val = ta_data.get("BB_upper")
    bb_upper_str = escape_md(f"{bb_upper_val:.2f}") if bb_upper_val is not None else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    bb_lower_val = ta_data.get("BB_lower")
    bb_lower_str = escape_md(f"{bb_lower_val:.2f}") if bb_lower_val is not None else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    summary = (
        f"*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {escape_md(pair)} –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ {escape_md(interval)}:*\n"
        f"*–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è:* {last_close_str}\n"
        f"*RSI:* {rsi_str}\n"
        f"*ADX:* {adx_str}\n"
        f"*MACD:* {macd_str}\n"
        f"*Bollinger Bands:* –í–µ—Ä—Ö {bb_upper_str}, –ù–∏–∂ {bb_lower_str}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="calc_signal")]
    ])

    await message.reply(summary, reply_markup=keyboard, parse_mode="MarkdownV2")

@router.callback_query(F.data == "calc_signal")
async def calc_signal_callback_handler(callback_query: types.CallbackQuery) -> None:

    user_id = callback_query.from_user.id
    ta_data = TA_DATA_CACHE.get(user_id)
    if not ta_data:
        await callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥–æ–π /ta")
        return

    overall_signal, report = calculate_composite_signal(ta_data)

    del TA_DATA_CACHE[user_id]

    await callback_query.message.answer(report, parse_mode="MarkdownV2")
    await callback_query.answer()
